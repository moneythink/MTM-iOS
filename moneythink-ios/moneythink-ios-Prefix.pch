//
//  Prefix header
//
//  The contents of this file are implicitly included at the beginning of every source file.
//

#import <Availability.h>

#define HEIGHT_IPHONE_5 568
#define HEIGHT_IPHONE_4 480

#define isPadDevice (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone && [[[UIDevice currentDevice] model] hasPrefix:@"iPad"])
#define IS_RETINA ([[UIScreen mainScreen] respondsToSelector:@selector(displayLinkWithTarget:selector:)] && ([UIScreen mainScreen].scale == 2.0))
#define IS_IPHONE_5 ( [ [ UIScreen mainScreen ] bounds ].size.height == HEIGHT_IPHONE_5 )
#define IS_IPHONE_4 ( [ [ UIScreen mainScreen ] bounds ].size.height == HEIGHT_IPHONE_4 )
#define MTMakeWeakSelf() __weak __typeof__(self) weakSelf = self
#define MTMakeStrongSelf() __typeof__(self) strongSelf = weakSelf

#define kInternetDidBecomeReachableNotification @"kInternetDidBecomeReachableNotification"
#define kWillMoveToOpenMenuPositionNotification @"kWillMoveToOpenMenuPositionNotification"
#define kUnreadNotificationCountNotification    @"kUnreadNotificationCountNotification"

#define kUserDidChangeClass                 @"kUserDidChangeClass"
#define kUserSavedProfileChanges            @"kUserSavedProfileChanges"
#define kUserActivatedChallenges            @"kUserActivatedChallenges"
#define kUserInvitedStudents                @"kUserInvitedStudents"
#define kNotificationChallengeActivated     @"CHALLENGE_ACTIVATED"
#define kNotificationPostComment            @"COMMENT"
#define kNotificationPostLiked              @"LIKE"
#define kNotificationLeaderOn               @"LEADER_ON"
#define kNotificationLeaderOff              @"LEADER_OFF"
#define kNotificationVerifyPost             @"VERIFY_POST"
#define kNotificationStudentInactivity      @"STUDENT_INACTIVITY"
#define kNotificationMentorInactivity       @"MENTOR_INACTIVITY"
#define kLastViewedChallengeId              @"kLastViewedChallengeId"
#define kUserHasOnboardedKey                @"user_has_onboarded"
#define kFirstTimeRunKey                    @"kFirstTimeRunKey"
#define kForcedUpdateKey                    @"kForcedUpdateKey"
#define MTNetworkServiceOAuthCredentialKey  @"MTNetworkServiceOAuthCredentialKey"
#define kLastNotificationFetchDateKey       @"kLastNotificationFetchDateKey"
#define kPushMessagingRegistrationKey       @"kPushMessagingRegistrationKey"
#define kRefreshForEmoji                    @"kRefreshForEmoji"
#define kRefreshForChallenges               @"kRefreshForChallenges"
#define kRefreshForButtons                  @"kRefreshForButtons"
#define kRefreshForMeUser                   @"kRefreshForMeUser"

#ifdef __OBJC__
#import <UIKit/UIKit.h>
#import <Foundation/Foundation.h>
#import <MobileCoreServices/UTCoreTypes.h>
#import <CoreGraphics/CoreGraphics.h>
#import <Parse/Parse.h>
#import <ParseUI/ParseUI.h>
#import <ZendeskSDK/ZendeskSDK.h>

#import "AFNetworking.h"
#import "AFHttpRequestOperationManager+Synchronous.h"

#import "MTUser.h"
#import "MTOptionalImage.h"
#import "MTOrganization.h"
#import "MTClass.h"
#import "MTChallenge.h"
#import "MTChallengePost.h"
#import "MTChallengePostComment.h"
#import "MTEmoji.h"
#import "MTChallengePostLike.h"
#import "MTChallengeButton.h"
#import "MTChallengeButtonClick.h"
#import "MTChallengeProgress.h"
#import "MTNotification.h"
#import "MTUserPostPropertyCount.h"

#import "MTUtil.h"
#import "UIColor+Palette.h"
#import "UIView+MTAdditions.h"
#import "UIAlertView+MTAdditions.h"
#import "NSDate+MTAdditions.h"
#import "UIImage+MTAdditions.h"
#import "UIFont+MTAdditions.h"
#import "NSDictionary+MTAdditions.h"
#import "NSError+MTAdditions.h"

#import "MTTextField.h"
#import "MTNetworkManager.h"

#import "Reachability.h"
#import "BlocksKit.h"
#import "BlocksKit+UIKit.h"
#import "UIActionSheet+BlocksKit.h"
#import "UIAlertView+BlocksKit.h"
#import "MBProgressHUD.h"
#import "SWRevealViewController.h"
#import "MTViewController.h"
#import "UIBarButtonItem+Badge.h"
#import "UIButton+Badge.h"
#import "UIScrollView+EmptyDataSet.h"

#import "MTOnboardingController.h"

static inline BOOL IsEmpty(id thing) {
    return thing == nil ||
    thing == [NSNull null] ||
    ([thing respondsToSelector:@selector(length)] && [(NSData *)thing length] == 0) ||
    ([thing respondsToSelector:@selector(count)]  && [(NSArray *)thing count] == 0);
}


#endif
